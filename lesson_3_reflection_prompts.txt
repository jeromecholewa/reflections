Q: When would you want to use a remote repository rather than keeping all your work local?
A: There are several cases:
  1. I need to have a safe place where I keep my files. If I lose my PC or my PC breaks down, I can find my files
  here in the remote repository
  2. If there are several people working on the project, several people can create new branches and work
  independently. Then I can merge the branches whenever necessary. If I worked only locally nobody would be able
  to contribute to my file.
  
Q: Why might you want to always pull changes manually rather than having
 Git automatically
stay up-to-date with your remote repository?
A: not all changes on GitHub are OK before I checked them, if there are
several people working on my project
So I need to check the contribution of other people before pulling the
 changes to my local drive.

Q: Describe the differences between forks, clones, and branches. When would you use one instead of another?
A: FORKS: it is used only on github (not on the local repository on my 
computer). It is used to make a copy of someone else's repository so that 
we can use and modify their files indepently from them.
Still using forks makes it easy to propose your own changes to the 
original author of the files
CLONES: they are used either on the local computer (to be learned in
another lesson) or to clone a repository from GitHub to my local computer
(and hence create a local repository, linked to the remote on GitHub)
BRANCHES: are used in one specific repository (remote or local) in order
to explore some new features of a file (specific code, specific options)
that you are not sure yet to implement in your production file.

Q: What is the benefit of having a copy of the last known state of the 
remote stored locally?
A: The benefit is that, even offline, we know the status of the remote
 repository state, at the last time it was synced with the local repo

Q: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
A: without git or github, collaborating would be more difficult, less
organized. People would send each other files or post files on a 
common platform like dropbox, they would have to agree of a file 
naming and version system and it would be more difficult to compare files
with each other (or you would have to use special software to compare 
files)
With Git and github all the versioning and history is available to 
everyone involved in the project and it is easy to compare files
before deciding to accept, reject or change a modification request.

Q: When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
A: Working directly in the master is easier and more straightforward = 
no need to merge branches! But if you are not sure whether a modification
 is good or ready for production, and if you need someone to check that
 change before agreeing to it, you might want to create a branch taht will
 be easily checked and compared to the master branch before the final
 decision is made, that is "merging"